# SQLAlchemy Tutorial: Django ORM과 비교해서 #

## 설치 ##
```
pip install SQLAlchemy
```
하지만 Anaconda를 사용하면 기본으로 설치되어 있으니 Anaconda 배포판을 사용하는 경우라면 따로 설치할 필요가 없습니다.

## 설정 ##
Django  DB 파일 생성은 아래의 단계를 거칩니다. 

1. `settings.py`에서 `sqlite3`파일의 경로를 정하고, 
2. `python manage.py makemigrations` 을 실행한 다음, 
3. `python manage.py migrate`을 차례로 실행하면 `sqlite3`파일이 생성됩니다.

위의 단계를 염두하고 SQLAlchemy 설정을 차례로 알아봅시다.

### 테이블 정의 ###
This section discusses the fundamental Table, Column and MetaData objects.
세가지 변수를 정의합니다. 

1. [MetaData](http://docs.sqlalchemy.org/en/latest/core/metadata.html): a container object that keeps together many different features of a database (or multiple databases) being described
2. Table: 각 테이블을 정의
3. Column: 테이블에 포함되는 컬럼의 정의

같은 MetaData를 나누는 테이블 혹은 같은 Base를 상속받은 테이블을 모아 데이터베이스를 생성합니다.

#### class로 묶는 방법 ####
```
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
Base = declarative_base()

class Department(Base):
    __tablename__ = 'department'
    id = Column(Integer, primary_key=True)

class Employee(Base):
    __tablename__ = 'employee'
    id = Column(Integer, primary_key=True)

engine = create_engine('sqlite:///C:\\path\\to\\database\\db.sqlite3', echo=False, convert_unicode=True)
session = sessionmaker()
session.configure(bind=engine)

Base.metadata.create_all(engine)
```

#### Table()을 이용하는 방법 ####
```
from sqlalchemy import create_engine, MetaData, Table, Column, Integer, String, ForeignKey
engine = create_engine('sqlite:///:memory:')

metadata = MetaData()

user = Table('user', metadata,
    Column('user_id', Integer, primary_key=True),
    Column('user_name', String(16), nullable=False),
    Column('email_address', String(60), key='email'),
    Column('password', String(20), nullable=False)
)

user_prefs = Table('user_prefs', metadata,
    Column('pref_id', Integer, primary_key=True),
    Column('user_id', Integer, ForeignKey("user.user_id"), nullable=False),
    Column('pref_name', String(40), nullable=False),
    Column('pref_value', String(100))
)

metadata.create_all(engine)
```

### creating engine ###
```
from sqlalchemy import create_engine

# windows
engine = create_engine('sqlite:///C:\\path\\to\\database\\db.sqlite3', echo=False, convert_unicode=True)
```
### creating session ###
from sqlalchemy.orm import sessionmaker()
session = sessionmaker()

### binding session and engine ###
session.configure(bind=engine)

### sqlite3와 연결 ###

## DB 사용 ##
SQLAlchemy는 session을 통해 query를 실행합니다.

## CRUD ##
### create ###
### read ###
#### SQLAlchemy vs Django ORM ####
SQLAlchemy is a toolkit for python programmers who want or need to use a database to write programs that do so. Django's ORM is a tool for python programmers to quickly model business-level data relationships and use a database for persistent storage. This is really an important distinction; the Django ORM interface is focused on the application's data model, whereas SQLAlchemy's interface is focused on the underlying data store. In Django, your application is first class; in Alchemy, it isn't. As an example, look at a simple usage of a many-to-many relationship in each:

```python
Django: Book.objects.filter(author__age=27)
SQLAlchemy: session.query(Book).join(Book, Author).filter(Author.age==27)
```

Note that Django's API is entirely concerned with the relationship between the application-level abstractions 'Book' and 'Author', whereas the Alchemy version includes far more details about what is actually going to happen when executed. This example exposes the different assumptions the ORMs have to live with, as well: implicit within Django's design are decisions on the way connections are made to the database, how to evaluate queries (lazily or eagerly), whereas in SQLAlchemy these details are in plain sight.

[source](http://jmoiron.net/blog/about-sqlalchemy-and-djangos-orm/)
### update ###
### delete ###
