# SQLAlchemy Tutorial: Django ORM과 비교해서 #

## 설치 ##
```
pip install SQLAlchemy
```
하지만 Anaconda를 사용하면 기본으로 설치되어 있으니 Anaconda 배포판을 사용하는 경우라면 따로 설치할 필요가 없습니다.

## 설정 ##
Django  DB설정과 비교해 봅시다. 

1. settings.py에서 sqlite3파일의 경로를 정하고, 
2. python manage.py makemigrations 을 실행한 다음, 
3. python manage.py migrate 을 차례로 실행하면 sqlite3 파일이 생성됩니다.

### sqlite3와 연결 ###

## DB 정의 ##

## CRUD ##
### create ###
### read ###
#### SQLAlchemy vs Django ORM ####
SQLAlchemy is a toolkit for python programmers who want or need to use a database to write programs that do so. Django's ORM is a tool for python programmers to quickly model business-level data relationships and use a database for persistent storage. This is really an important distinction; the Django ORM interface is focused on the application's data model, whereas SQLAlchemy's interface is focused on the underlying data store. In Django, your application is first class; in Alchemy, it isn't. As an example, look at a simple usage of a many-to-many relationship in each:

```python
Django: Book.objects.filter(author__age=27)
SQLAlchemy: session.query(Book).join(Book, Author).filter(Author.age==27)
```

Note that Django's API is entirely concerned with the relationship between the application-level abstractions 'Book' and 'Author', whereas the Alchemy version includes far more details about what is actually going to happen when executed. This example exposes the different assumptions the ORMs have to live with, as well: implicit within Django's design are decisions on the way connections are made to the database, how to evaluate queries (lazily or eagerly), whereas in SQLAlchemy these details are in plain sight.

[source](http://jmoiron.net/blog/about-sqlalchemy-and-djangos-orm/)
### update ###
### delete ###
